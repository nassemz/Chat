/*
 * MenuUI.java
 *
 * Created on January 15, 2007, 2:43 PM
 */

package clientchat;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.*;
import messages.ServerMessages;
import sun.audio.*;

/**
 *
 * @author  N-Z
 */
public class MenuUI extends javax.swing.JFrame {
    private ObjectInputStream input;        //input for input data from the server
    private ObjectOutputStream output;      //output for output data from the server
    private String userName;                //Client UserName
    private InputThread inputconn;          //a thread to recive incomming data
    private Hashtable OpenChatRooms = new Hashtable();  //it's contain the open chat rooms names
    private LinkedList OnlineUsers = new LinkedList();  //it's contain the online users names
    private DesEncrypter encrypter;        //the encrypt class for encryption and decryption incomming and outcomming data
    
    /** Creates new form MenuUI */
    public MenuUI(String userName_t
            ,ObjectInputStream input_t,ObjectOutputStream output_t,DesEncrypter encrypt) {
        super("Messnger " + userName_t);
        input = input_t;        //input for input data from the server
        output = output_t;      //output for output data from the server
        userName = userName_t;  //Client UserName
        encrypter = encrypt;    //the encrypt class for encryption and decryption incomming and outcomming data
        initComponents();
        this.setVisible(true); // set the menu visble true
        inputconn = new InputThread(userName,input,output,encrypter,this); //define a thread to recive incomming data
        // set the mainmenu to send the recivevig megs to the menu and the menu will mangge it
        inputconn.start();      // start the thread
        new IncomingFilesThread(this).start();// start the incoming files thread too
        Image im = Toolkit.getDefaultToolkit().getImage("C:\\VwV\\icons\\Logon.png"); // set the icon
        setIconImage(im); // set the icon
        setLocationRelativeTo(null); //Display the window center it.
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        OnlineUsersList = new java.awt.List();
        ExitButt = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        ChannelList = new java.awt.List();
        SendToChannelButt = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "On line Usres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
        OnlineUsersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OnlineUsersListMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OnlineUsersList, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(OnlineUsersList, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
        );

        ExitButt.setText("Exit");
        ExitButt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ExitButtMouseReleased(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Local Channel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ChannelList, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(ChannelList, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
        );

        SendToChannelButt.setText("Send To Channel");
        SendToChannelButt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SendToChannelButtMouseClicked(evt);
            }
        });

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(16, 16, 16)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SendToChannelButt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitButt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SendToChannelButt)
                    .addComponent(ExitButt)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        // must know which key pressed
        int code = evt.getKeyCode();
        //Key pressed is the Enter key. SendChatMessage
        if(code == KeyEvent.VK_ENTER)
            SendChannelMessage();
    }//GEN-LAST:event_jTextField2KeyReleased
    
    private void SendToChannelButtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SendToChannelButtMouseClicked
        // call the function SendChannelMessage if the send button clicked
        SendChannelMessage();
    }//GEN-LAST:event_SendToChannelButtMouseClicked
    
    private void OnlineUsersListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OnlineUsersListMouseClicked
        try{
            if(evt.getClickCount() < 2) // have to press double click
                return;
            //return the chatroom refernce object if not exist return null
            ClientChat CurrentUser = (ClientChat) OpenChatRooms.get(OnlineUsersList.getSelectedItem().toString());
            // if exist then con't creat a new one'
            if (CurrentUser != null) {
                CurrentUser.setVisible(true);
                return;
            }
            // if not exist the creat a new one
            CurrentUser = new ClientChat(OnlineUsersList.getSelectedItem().toString(),input,output,userName,encrypter,OpenChatRooms);
            CurrentUser.setVisible(true);
            // and add it to the openchatrooms hashtable!!
            OpenChatRooms.put(OnlineUsersList.getSelectedItem().toString(),CurrentUser);
        } catch(Exception ex){}
    }//GEN-LAST:event_OnlineUsersListMouseClicked
    
    private void ExitButtMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitButtMouseReleased
        // Exit
        System.exit(0);
    }//GEN-LAST:event_ExitButtMouseReleased

    private void SendChannelMessage(){
        // send the message to the channel
        if(jTextField2.getText().equals(""))
            return;
        // add the message to the client channel
        ChannelList.add("[" + userName + "] : " + jTextField2.getText());
        try {
            //send the message to the server to be sending to all the online users
            sendData(PeraperSender(ServerMessages.GENERAL_CHANNEL) + PeraperSender(userName) + jTextField2.getText());
            // set the textfiled = ""
            jTextField2.setText("");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    private String GetSender(String temp,int index){
        // retrn the Sender Name it's taken from the string that the user sent
        // if there if no user will return the string DEFAULTEMPTY
        for(int i = index ; i!=-1 ; i--)
            if(!temp.substring(i-1,i).equals(" "))
                return temp.substring(0,i);
        return ServerMessages.DEFAULTEMPTY;
    }
    
    /*
    public void SendFile(){
        // send file to specific user
        String Temp;
        try {
            Temp = RecivedString(); // recive a message that contain the rciver ueser name and his IP address
            String RecivUser = Temp.substring(0,ServerMessages.DefultMaxIndex);
            String ip = Temp.substring(RecivUser.length(),Temp.length());
            //new SendFile(RecivUser,ip).setVisible(true);
            new SendFile(RecivUser,ip,userName).setVisible(true); //create the send file interface with the specific parameters
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
    }
    */
    
    private String ParseString(String Data){
        // function to parse a string
        String [] temp = null;
        temp = Data.split(ServerMessages.DEFAULTSLPITER);
        if (temp == null)
            return ServerMessages.DEFAULTEMPTY;
        else
            return temp[0];
    }
    
    public void receivedInput(String inputstr){
        //parse the input string to check if it's
        String Temp = ParseString(inputstr);
        if(Temp.equals(ServerMessages.DEFAULTEMPTY))
            return;
        //get the reciver user
        String RecivUser = GetSender(inputstr.substring(0,ServerMessages.DefultMaxIndex),ServerMessages.DefultMaxIndex);
        if(RecivUser.equals(ServerMessages.DEFAULTEMPTY))
            return;
        if(RecivUser.equals(ServerMessages.GENERAL_CHANNEL)) {
            ChannelList.add("[" + GetChannelSender(inputstr) + "] :" + GetChannelData(inputstr));
            return;
        }
        //get the Data of the chat
        String Data = inputstr.substring(ServerMessages.DefultMaxIndex);
        //check if the user in online mode else can't caht with him
        if(!OnlineUsers.contains( (String) RecivUser))
            return;
        //check if there is acurrent private chat room opened else open a new one
        ClientChat CurrentUser = (ClientChat) OpenChatRooms.get(GetSender(inputstr.substring(0,ServerMessages.DefultMaxIndex),ServerMessages.DefultMaxIndex));
        if (CurrentUser == null) {
            //create a new privtae chat windows
            PlaySound("C:\\VwV\\sounds\\notify.wav");
            ClientChat aa = new ClientChat(GetSender(inputstr.substring(0,ServerMessages.DefultMaxIndex)
            ,ServerMessages.DefultMaxIndex),input,output,userName,encrypter,OpenChatRooms);
            //tell the openChatRomms manneger that it's opened
            OpenChatRooms.put(GetSender(inputstr.substring(0,ServerMessages.DefultMaxIndex),ServerMessages.DefultMaxIndex),aa);
            aa.setVisible(true);
            //get the msg into it
            aa.GetMsg(Data,GetSender(inputstr.substring(0,ServerMessages.DefultMaxIndex),ServerMessages.DefultMaxIndex));
        } else {
            // if existed then get the msg into it
            CurrentUser.GetMsg(Data,GetSender(inputstr.substring(0,ServerMessages.DefultMaxIndex),ServerMessages.DefultMaxIndex));
            // and tell the user that there is an incomming msg
            CurrentUser.setVisible(true);
        }
    }
    
    private String GetChannelData(String temp) {
        // recive a channel data
        try{
            return temp.substring(ServerMessages.DefultMaxIndex * 2);
        } catch(Exception ex) {
            return ServerMessages.DEFAULTEMPTY;
        }
    }
    
    private String GetChannelSender(String temp) {
        // get the channel sender
        String Temp = temp.substring(ServerMessages.DefultMaxIndex);
        return GetSender(Temp,ServerMessages.DefultMaxIndex);
        
    }
    
    public void sendData(String str) throws IOException {
        /*******************************************************************
         * The sendData() method in the client sends data to the server
         ***************************************************************** */
        output.writeObject(encrypter.encrypt(str));//sending to the user a string as object
    }

    public String RecivedString() throws IOException, ClassNotFoundException{
        /*******************************************************************
         * The RecivedString() method in the client sends data to the server
         ***************************************************************** */
        String rec = (String) input.readObject();
        return encrypter.decrypt(rec);
    }
    
    public void receivedUsers() {
        // this function recive all the online users and put it into the list
        String Temp;
        try {
            Temp = RecivedString();
            OnlineUsersList.removeAll(); // clear the exist list
            OnlineUsers.clear(); // and clear the omline users names from the hashtable
            // add all the users
            while(!Temp.equals(ServerMessages.END_ONLINEUSERS)) {
                OnlineUsersList.add(Temp);
                OnlineUsers.add(Temp);
                Temp = RecivedString();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void AddOneUser() {
        // add a single user if it's get online and tell me that he is online
        try {
            String Temp;
            Temp = RecivedString();
            OnlineUsersList.add(Temp);
            OnlineUsers.add(Temp);
            ChannelList.add(Temp + " loged in");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void DeleteOneUser() {
        // remove a single user if it's get offline and tell me that he is offline
        try {
            String Temp;
            Temp = RecivedString();
            OnlineUsersList.remove(Temp);
            OnlineUsers.remove(Temp);
            ChannelList.add(Temp + " loged out");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private String PeraperSender(String userName) {
        int length = ServerMessages.DefultMaxIndex-userName.length(); //get number of spaces have to add after the user name
        String Sender = userName;
        if (length < 0) //if the user name more than the DefultMaxIndex then return
            return ServerMessages.DEFAULTEMPTY;
        for(int i=length ; i!=0 ; i--) //fill the new Name with spaces like : "nassem_z@hotmail.com         ...-> until DefultMaxIndex"
            Sender = Sender + " ";
        return Sender;
    }
    
    private void PlaySound(String soundpath){
        try{
            // AudioPlayer instantiated to force run of static initializers.
            AudioPlayer audioPlayer = AudioPlayer.player;
            AudioDataStream audioDataStream;
            ContinuousAudioDataStream continuousAudioDataStream;
            // Applet role
            
            FileInputStream fis = new FileInputStream( new File( soundpath) );
            AudioStream as = new AudioStream( fis ); // header plus audio data
            AudioData ad = as.getData(); // audio data only, no header
            audioDataStream = new AudioDataStream( ad );
            //continuousAudioDataStream = new ContinuousAudioDataStream( ad );
            
            
            audioPlayer.start( audioDataStream );
            
        }catch(Exception e){}
    }
    
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.List ChannelList;
    private javax.swing.JButton ExitButt;
    private java.awt.List OnlineUsersList;
    private javax.swing.JButton SendToChannelButt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
    
}
